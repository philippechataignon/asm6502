The Oft-Misunderstood WAIT

The explanation of how long the WAIT routine at $FCA8 takes to run is incorrect
in multiple sources. For example, the original monitor ROM listing says:

fcaa: e9 01        WAIT3       sbc     #$01            ;1.0204 usec
fcac: d0 fc                    bne     WAIT3           ;(13+2712*A+512*A*A)

Neither comment is correct. The official Apple documentation, Apple II Monitors
Peeled, says:

  2.5A**2 + 13.5A + 13 machine cycles of 1.023 microseconds

William F. Luebbert's What's Where in the Apple says:

  wait estimated at 2.5A^2+13.5A+13 wait cycles of 1.02 microseconds

These are both multiplying the cycle count by the CPU's clock speed (in cycles
per second) when they should be using the cycle time (in seconds per cycle). A
2MHz machine would run the code in half the time, not take twice as long.

So what's the correct answer? Let's start by confirming the cycle count. The
code is:

fca8: 38           WAIT     sec                ;2
fca9: 48           WAIT2    pha                ;3
fcaa: e9 01        WAIT3    sbc     #$01       ;2
fcac: d0 fc                 bne     WAIT3      ;2+
fcae: 68                    pla                ;4
fcaf: e9 01                 sbc     #$01       ;2
fcb1: d0 f6                 bne     WAIT2      ;2+
fcb3: 60                    rts                ;6

The inner SBC/BNE loop is usually 5 cycles, because BNE takes 3 cycles when the
branch is taken. The last iteration takes one fewer. We decrement A each time,
so if initially A=4, the inner loop executes 4+3+2+1 times. So this takes
A*(A+1)/2 * 5 - A cycles.

The outer loop executes A times, and takes 12 cycles. Again, the last time
through takes one fewer: A*12 - 1.

Outside of that, we have 8 cycles of non-loop stuff (SEC/RTS). If we want to
add the JSR that called here that's another 6 cycles, but I prefer to put that
in the caller's account instead (could've been a JMP at the end of a function
rather than a JSR).

Putting it together yields A*(A+1)/2 * 5 - A + A*12 - 1 + 8. Applying algebra:

  (A*A/2 + A/2) * 5 + A*11 + 7 A*A*5/2 + A*5/2 + A*11 + 7 A*A*2.5 + A*13.5 + 7

Throw in the 6-cycle JSR and you get the formula from Apple II Monitors Peeled.
So the cycle-count part of their formula is correct. What about the time per
cycle?

In a comp.sys.apple2 post, awanderin notes:

    The CPU has 64 clock periods of 14 * (1 / 14.318181 MHz) or 0.978µs and one
    stretched period of 16 * (1 / 14.318181 MHz) or 1.117µs, which gives an
    average clock period of 0.980µs. That works out to an average clock speed
    of 1.0205 MHz. 

This gives a final result of:

  (A*A*2.5 + A*13.5 + 7) * 0.980 usec

Which is about 4% less than the "official" duration.

Side note: calling WAIT with A set to zero is *almost* the same as A=256. The
code does the subtraction before the zero test, so it doesn't exit immediately.
However, the first subtraction clears the carry, which means the next
subtraction will subtract 2 instead of 1. So the first two executions of the
inner loop have one fewer iteration (the first one because of the inner-loop
SBC, the second one because of the outer-loop SBC). So it's 10 cycles short.

  A       delay in µs
  1       22
  2       43
  3       68
  4       98
  5      134
  6      174
  7      219
  8      269
  9      324
 10      384
 11      448
 12      518
 13      592
 14      672
 15      756
 16      845
 17      939
 18     1038
 19     1142
 20     1251
 21     1365
 22     1483
 23     1607
 24     1735
 25     1868
 26     2007
 27     2150
 28     2298
 29     2450
 30     2608
 31     2771
 32     2939
 33     3111
 34     3288
 35     3471
 36     3658
 37     3850
 38     4047
 39     4249
 40     4456
 41     4667
 42     4884
 43     5105
 44     5332
 45     5563
 46     5799
 47     6040
 48     6286
 49     6537
 50     6793
 51     7054
 52     7319
 53     7590
 54     7865
 55     8145
 56     8430
 57     8721
 58     9016
 59     9315
 60     9620
 61     9930
 62    10244
 63    10564
 64    10888
 65    11218
 66    11552
 67    11891
 68    12235
 69    12584
 70    12937
 71    13296
 72    13660
 73    14028
 74    14402
 75    14780
 76    15163
 77    15551
 78    15944
 79    16342
 80    16745
 81    17152
 82    17565
 83    17983
 84    18405
 85    18832
 86    19264
 87    19701
 88    20143
 89    20590
 90    21042
 91    21499
 92    21960
 93    22427
 94    22898
 95    23374
 96    23856
 97    24342
 98    24833
 99    25329
100    25829
101    26335
102    26846
103    27361
104    27881
105    28407
106    28937
107    29472
108    30012
109    30557
110    31107
111    31661
112    32221
113    32785
114    33355
115    33929
116    34508
117    35092
118    35681
119    36275
120    36874
121    37478
122    38086
123    38700
124    39318
125    39941
126    40570
127    41203
128    41841
129    42483
130    43131
131    43784
132    44442
133    45104
134    45771
135    46444
136    47121
137    47803
138    48490
139    49182
140    49879
141    50580
142    51287
143    51998
144    52715
145    53436
146    54162
147    54893
148    55629
149    56370
150    57116
151    57867
152    58622
153    59383
154    60148
155    60918
156    61693
157    62474
158    63259
159    64048
160    64843
161    65643
162    66447
163    67257
164    68071
165    68891
166    69715
167    70544
168    71378
169    72217
170    73060
171    73909
172    74763
173    75621
174    76485
175    77353
176    78226
177    79104
178    79987
179    80875
180    81768
181    82665
182    83568
183    84476
184    85388
185    86305
186    87227
187    88154
188    89086
189    90023
190    90965
191    91912
192    92863
193    93820
194    94781
195    95747
196    96719
197    97695
198    98676
199    99662
200   100652
201   101648
202   102649
203   103654
204   104664
205   105680
206   106700
207   107725
208   108755
209   109790
210   110830
211   111874
212   112924
213   113978
214   115038
215   116102
216   117171
217   118245
218   119324
219   120408
220   121497
221   122591
222   123689
223   124793
224   125901
225   127014
226   128133
227   129256
228   130384
229   131516
230   132654
231   133797
232   134945
233   136097
234   137254
235   138417
236   139584
237   140756
238   141933
239   143115
240   144302
241   145493
242   146690
243   147891
244   149098
245   150309
246   151525
247   152746
248   153972
249   155203
250   156439
251   157680
252   158925
253   160176
254   161431
255   162691
